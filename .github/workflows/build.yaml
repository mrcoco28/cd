name: Build App

on:
  push:
    branches:
      - main   # Lance le workflow à chaque push sur main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Récupérer ton code
      - uses: actions/checkout@v2

      # Étape 2 : Construire et pousser ton image Docker
      - name: Build and Push Docker image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: docker.io
          repository: mrcoco28/cd   # <-- ton pseudo DockerHub
          tag_with_sha: true

      # Étape 3 : Scanner l’image Docker avec Trivy
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/mrcoco28/cd:${{ github.sha }}'
          format: 'table'
          exit-code: '1'   # échoue si vulnérabilités CRITICAL/HIGH
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # Étape 4 : Analyse SonarCloud
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # # Étape 5 : Analyse OWASP Dependency Check
      # - uses: 3r1co/dependency-check-action@master
      #   name: OWASP Dependency Check
      #   with:
      #     Project-Name: TestApp
        
      # # Étape 6 : Sauvegarder les rapports OWASP
      # - name: Archive dependency check reports
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: reports
      #     path: reports
